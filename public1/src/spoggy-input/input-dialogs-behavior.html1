<script src="agents/InputDialogsAgent.js"></script>
<script>
/* @polymerMixin */
var InputDialogsBehaviorMixin = Polymer.dedupingMixin(function(superClass){
  return class InputDialogsBehavior extends superClass {
    constructor() {
      super();
      //  console.log("*************************INPUT behavior")
      //  console.log(this.inputProp);
    }

    static get properties() {
      return {
        inputProp: {
          type: String,
          value: 'inputB*****************************************'
        }
      };
    }


    traiteMessage(){
      console.log(this.network)
      var message = this.$.inputMessage.value;
      message=message.trim();
      let firstChar = message.charAt(0);
      switch(firstChar){
        case '/':
        //    let commande = rdf.quad(rdf.blankNode(), rdf.namedNode('commande'),rdf.literal(message))
        //  this.catchCommande(message,this.network,this);
        this.catchCommande(message, this.network, this);
        this.$.inputMessage.value = "";
        break;

        case '.':
        var last = this.commandHistory[this.commandHistory.length-1];
        this.$.inputMessage.value = last.s+" "+last.p+" "+last.o;
        break;

        case ';':
        var last = this.commandHistory[this.commandHistory.length-1];
        this.$.inputMessage.value = last.s+" "+last.p+" ";
        break;

        case ',':
        var last = this.commandHistory[this.commandHistory.length-1];
        this.$.inputMessage.value = last.s+" ";
        break;

        default:
        let lastChar = message.slice(-1);
        let messageCut = message.slice(0,-1).split(" ");
        let isTriplet = true;
        //  console.log(messageCut);

        let detectLiteral = "";
        let messageCutTemp = [];
        messageCut.forEach(function(part){
          part = part.trim();
          //  console.log(part);
          if (part.startsWith('"')){
            detectLiteral ="debut";
            //  console.log(detectLiteral);
            messageCutTemp.push(part.substr(1));
          }else if (part.endsWith('"')){
            detectLiteral = "fin";
            //console.log(detectLiteral);
            messageCutTemp.push(messageCutTemp.pop()+" "+part.slice(0,-1));
          }else if (detectLiteral == "debut"){
            //  console.log("recupere le dernier et lui ajoute part" )
            messageCutTemp.push(messageCutTemp.pop()+" "+part)
          }else {
            messageCutTemp.push(part);
          }
        });
        if (messageCutTemp.length > 0){
          messageCut = messageCutTemp;
        }

        switch(lastChar){
          case '.':
          this.$.inputMessage.value = "";
          break;
          case ';':
          if (messageCut[0].indexOf(" ") > -1){
            this.$.inputMessage.value = '"'+messageCut[0]+'"'+' ';
          }else{
            this.$.inputMessage.value = messageCut[0]+' ';
          }
          break;
          case ',':
          if (messageCut[0].indexOf(" ") > -1){
            this.$.inputMessage.value = '"'+messageCut[0]+'" ';
          }else{
            this.$.inputMessage.value = messageCut[0]+' ';
          }
          if (messageCut[1].indexOf(" ") > -1){
            this.$.inputMessage.value += '"'+messageCut[1]+'" ';
          }else{
            this.$.inputMessage.value += messageCut[1]+' ';
          }
          break;
          case '-':
          if (messageCut[2].indexOf(" ") > -1){
            this.$.inputMessage.value = '"'+messageCut[2]+'"'+' ';
          }else{
            this.$.inputMessage.value = messageCut[2]+' ';
          }
          break;
          default:
          console.log("message to chat "+message)
          //this.sendMessage(message);
          this.agentInputDialogs.send('agentSocket', {type: "sendMessage", message:message});
          //  this.catchTriplet(message.slice(0,-1), this.network); // A REMPLACER PAR CATCHTRIPLETS V2
          this.$.inputMessage.value = "";
          isTriplet = false;
        }
        if (isTriplet){
          /*  let t = {}
          t.s = messageCut.shift();
          t.p = messageCut.shift();
          t.o = messageCut.join(" ");
          if (this.commandHistory.length > 10){
          this.shift('commandHistory');
        }
        this.push('commandHistory',t);
        let triplets = [];
        triplets.push(t)*/
        // utiliser addActions
        //  this.catchTripletsV2(triplets, this.network);

        //      this.catchTriplet(messageCut, this.network);
        this.agentInputDialogs.send('agentGraph', {type: "catchTriplet", triplet:messageCut}); //
        //        this.agentInput.send('agentSparqlUpdate', {type: "catchTriplet", triplet:messageCut});
      }
    }
  }

  afficheAide()
  {
    this.$.helpPopUp.toggle();
  }

  handleFileSelected(evt) {
    var app = this;
    var partageImport = app.$.partageImport.checked;
    var remplaceNetwork = app.$.remplaceNetwork.checked;
    var files = evt.target.files; // FileList object
    // files is a FileList of File objects. List some properties.
    var output = [];
    for (var i = 0; i < files.length; i++) {
      // Code to execute for every file selected
      var fichier = files[i];
      console.log(fichier);
      this.agentInputDialogs.send('agentGraph', {type: 'decortiqueFile', fichier: fichier, remplaceNetwork: remplaceNetwork});
      //    this.decortiqueFile(fichier, this.network, remplaceNetwork);
    }
    console.log("fin");
    // Code to execute after that
    evt.target.files = null;
    app.$.importPopUp.style.display = 'none';
    //  app.$.inputMessage.value = '';
  }

  catchCommande(commande){
    console.log(commande)
    switch(commande) {
      case "/h":
      case "/help":
      case "/aide":
      this.$.helpPopUp.toggle();
      break;
      case "/e":
      case "/export":
      case "/exportJson":
      //this.exportJson();
      this.agentInputDialogs.send('agentGraph', {type: 'exportJson'})
      break;
      case "/t":
      //  this.exportTtl(this.network,this);
      this.agentInputDialogs.send('agentGraph', {type: 'exportTtl'})
      break;
      case "/i":
      case "/import":
      case "/importJson":
      //  importJson(network,app);
      this.$.importPopUp.toggle();
      //  this.$.dialogs.openImport(this.network)
      break;
      case "/n":
      console.log("new graph");
      //  this.newGraph(this.network, this);
      this.agentInputDialogs.send('agentGraph', {type: 'newGraph'})
      this.agentInputDialogs.send('agentSparqlUpdate', {type: "newGraph"});
      break;
      case "/b":
      console.log("connection a la base levelgraph");
      this.connectBase(this.network,this);
      break;
      /*
      case "/p":
      case "/t":
      // non traitÃ© ici , mais par le serveur
      console.log("triplet, predicat ou noeud");
      break;*/
      default:
      console.log("non traite"+ commande);
      //  return afficheCommandes();
    }
  }
  updateInput(newInput){
    newInput = newInput.replace(/<br\s*\/?>/mg,"");
    if (newInput.indexOf(' ') >= 0){
      newInput = '"'+newInput+'"';
    }
    newInput=newInput+" ";
    this.$.inputMessage.value += newInput;
  }




}
});

</script>
